---
layout:     post
title:      "如何给自己的项目设计好CICD"
date:       2022-06-26 10:00:00
author:     "Hawkingrei"
header-img: "img/post-bg-2015.jpg"
catalog: true
tag: [Linux, C] 
---

现如今，CICD 的理念越来越深入人心，我供职过的公司无一例外的都采用了 CICD 来加强软件质量。不过因为供职过的公司规模大小、行业属性不尽相同。所以落地CICD的方式也不尽相同，特别是在老东家的时候，参与了 Mono repo 的建设与 CICD 系统的开发。所以自觉的对 CICD 有所深入了解可以总结一下。

# 一个失败的 CICD 成长史

你的失败命中注定

当你的项目刚刚开始时，一切看起来都很美好。编译测试都可以快速的完成，整个项目也可以只有你一个人，这时候 CICD 也可以做的非常简单。于是乎，你觉得部署jenkins/ teamcity这类需要自己部署的CICD，还需要自己的机器资源。于是乎，你不加思索得使用了 github action 这类的免费CICD。一切看上去都非常美好。

随着的项目日趋完善，你写了越来越多的测试。所以你需要在这些测试放入到 CI 里去运行。单元测试可能还行，直接运行就可以了。但是对于集成测试，你可能需要在里面运行一些逻辑，启动一些服务来完成测试工作。于是你就把这些逻辑直接写入到 CI配置中。不过从目前来看，也还满意，起码代码与执行逻辑分离。一切都还顺风顺水。

你的项目发展的很好，越来越多的同学加入其中。你的编译速度也越来越慢，于是乎你开启了 cache 保持机制来加速。（注意以 github action 来说，你只能缓存 10 GB 的缓存，且超过7天没有访问，会被自动删除，其次github action是基于branch去缓存的，所以你有多个branch合并之后，几个branch的缓存是很难给复用的，所以他只是适用于一些中小型项目，对于大型项目而言，提速十分有限。）当时cache 开启之后你的速度得到了一点提升。

随着越来越多的开发任务在展开中，你免费资源的CI 已经越来越不能满足你的需要。开发们花了很长时间来等待 CI 的开始。在大家强烈的要求下，你权衡了一下成本。于是乎，你把 CI 迁移到jenkins，将其部署到自己的 IDC 机房内，你的资源问题初步得到了解决。反正资源不够就采购机器进行 join 到jenkins集群内。而且你为了让 jenkins 更好的利用好集群环境，将其部署到了 kubernetes 上。而且迁移过程中，你把老的执行脚本，迁移到了jenkins groovy 里面。

随着测试任务的增加，也越来越复杂。你的脚本写的越来越复杂。例如你的不同 Release Branch 依赖不同于linter版本，于是乎，你只能在脚本里为不同的 release branch 安装不同版本的 linter 工具。开发的 unstable test 越来越多，资源消耗越来越多，你很苦恼。于是，你想到了可以利用 commitid，让一些通过测试的 task 可以直接 pass，让之后没有通过的 task 继续运行。但是你会使用 Jenkins，但是不会对其进行开发，于是乎，你在脚本里做了一些hack脚本，自动push 任务的源信息到远端的服务上，下次运行任务的时候再检查一下任务是否运行过。你的执行脚本越来越复杂，开发看了你的脚本，表示很难帮你添加一下东西。外部的社区同学就更不知道怎么来帮助你，来完善你的测试效果。

开发对你的抱怨越来越多，你的cache没法像第三方那样托管，于是你研究了一个打包 cache 结果上传到 nfs 或者 s3 等储存里，然后之后再复用。结果你发现这样的花费高，性能提升还提升不了多少。而且 nfs 或者自己搭建的 ceph，还很不稳定，你还要想办法给他们搞 SRE。开发们对于质量的要求也越来越高，各种测试越来越花哨。开发们总希望测试能在merge之前完成，但是有些测试实在太长了，或者资源开销太大，你只能劝说开发把测试移到 merge 之后运行。于是乎，你发现那些 merge 的 PR 里会有一些把merge之后的任务跑跪，于是你又要追着开发，把这些测试修复。


这时你的老板看了有点生气，立了一个flag，说要提升CI效能。所以先让你搞一个CI的 dashboard，然后我们优化一波，来观察任务的耗时情况的变化。结果你发现 Jenkins 的任务太多了，你都没办法给他们一一打点，你选择放弃。而且任务如此之多，你也没什么办法来提升效率。只能建议机器不太行，建议加机器，但是 idc 的机器有限，只能选择上云。结果上云之后你发现，业务对CI的消耗也越来越多，但是你的机器扩容得越来越频繁。而且随着集群规模扩大，故障也越来越多，你对 jenkins的熟悉程度只是使用，解决他的问题让你非常头疼。我们对你的信任也越来越低，最后你只能跑路。

# 如何做好一个 CI

看完上面的故事，你有没有看到自己的影子呢，希望没有。可以说，他们的失败命中注定。

首先，我们要有一个意识，就是 CI 只是一个执行器。他来执行我们脚本，收集我们的日志、覆盖率数据和一些执行情况的工具而已。所以对于一个执行器而已，我们对于他的脚本要足够简单，理想情况下，我们将环境的定义放入到 Dockerfile 中，将逻辑的定义放入到自己repo的脚本里（这个脚本由你喜欢的语言来写）。最后交付给CI的只是一个环境镜像和运行脚本的启动命令而已。

这样的CI理念会带来极大的好处。开发可以很方便的将新的task加入到CI里。如果之后出现问题，开发也能直接在本地复现问题。CI 与研发同学只要保持一个约定即可。比如CI约定如何切入到开发的目录，以及运行过后的日志与数据如何回收，一般来说日志一般都是通过 stdout 来输出，而对于有其他的日志或数据要收集的，一般会有一个约定的目录，带任务结束后，直接上传到储存中，待之后渲染展示或者下载使用。

其次我们前期使用CI确实只要考虑使用，但是等到后期，你




# 如何面对大型项目，提升CI效率
